declare const _default: {
    commands: {
        cli: {
            MOCK_PLUGIN: string;
            UPGRADE: (version: string) => string;
        };
    };
    errors: {
        registry: {
            BATCH_ROUTE_BODY_NOT_VALID: (message: string) => string;
            BATCH_ROUTE_BODY_NOT_VALID_CODE: string;
            BATCH_ROUTE_COMPONENTS_PROPERTY_MISSING: string;
            BATCH_ROUTE_COMPONENTS_NOT_ARRAY: string;
            BATCH_ROUTE_COMPONENT_NAME_MISSING: (idx: number) => string;
            COMPONENT_EXECUTION_ERROR: (msg: string) => string;
            COMPONENT_NAME_NOT_VALID: string;
            COMPONENT_NAME_NOT_VALID_CODE: string;
            COMPONENT_NOT_FOUND: (name: string, source: string) => string;
            COMPONENT_PUBLISHNAME_CONFLICT: string;
            COMPONENT_PUBLISHVALIDATION_FAIL: (error: string) => string;
            COMPONENT_PUBLISHVALIDATION_FAIL_CODE: string;
            COMPONENT_VERSION_NOT_FOUND: (name: string, version: string, source: string) => string;
            COMPONENT_VERSION_ALREADY_FOUND: (name: string, version: string, source: string) => string;
            COMPONENT_VERSION_ALREADY_FOUND_CODE: string;
            COMPONENT_VERSION_NOT_VALID: (version: string) => string;
            COMPONENT_VERSION_NOT_VALID_CODE: string;
            COMPONENT_SET_HEADER_PARAMETERS_NOT_VALID: string;
            CONFIGURATION_DEPENDENCIES_MUST_BE_ARRAY: string;
            CONFIGURATION_EMPTY: string;
            CONFIGURATION_ONREQUEST_MUST_BE_FUNCTION: string;
            CONFIGURATION_OFFREQUEST_MUST_BE_FUNCTION: string;
            CONFIGURATION_PUBLISH_BASIC_AUTH_CREDENTIALS_MISSING: string;
            CONFIGURATION_PUBLISH_AUTH_MODULE_NOT_FOUND: (moduleName: string) => string;
            CONFIGURATION_PREFIX_DOES_NOT_END_WITH_SLASH: string;
            CONFIGURATION_PREFIX_DOES_NOT_START_WITH_SLASH: string;
            CONFIGURATION_ROUTES_HANDLER_MUST_BE_FUNCTION: string;
            CONFIGURATION_ROUTES_NOT_VALID: string;
            CONFIGURATION_ROUTES_MUST_BE_ARRAY: string;
            CONFIGURATION_ROUTES_ROUTE_CONTAINS_PREFIX: (prefix: string) => string;
            CONFIGURATION_STORAGE_NOT_VALID: (storage: string) => string;
            CONFIGURATION_HEADERS_TO_SKIP_MUST_BE_STRING_ARRAY: string;
            DATA_OBJECT_IS_UNDEFINED: string;
            DEPENDENCY_NOT_FOUND: (dependencies: string) => string;
            DEPENDENCY_NOT_FOUND_CODE: string;
            LOCAL_PUBLISH_NOT_ALLOWED: string;
            LOCAL_PUBLISH_NOT_ALLOWED_CODE: string;
            GENERIC_ERROR: string;
            MANDATORY_PARAMETER_MISSING: (parameter: string) => string;
            MANDATORY_PARAMETER_MISSING_CODE: string;
            NESTED_RENDERER_CALLBACK_IS_NOT_VALID: string;
            NESTED_RENDERER_COMPONENT_NAME_IS_NOT_VALID: string;
            NESTED_RENDERER_COMPONENTS_IS_NOT_VALID: string;
            NODE_CLI_VERSION_IS_NOT_VALID: (registry: string, cli: string) => string;
            OC_CLI_VERSION_IS_NOT_VALID: (registry: string, cli: string) => string;
            PARAMETER_WRONG_FORMAT: (parameters: string) => string;
            PARAMETER_WRONG_FORMAT_CODE: string;
            PLUGIN_NOT_IMPLEMENTED: (plugins: string) => string;
            PLUGIN_NOT_VALID: (plugin: string) => string;
            RESOLVING_ERROR: string;
            TEMPLATE_NOT_FOUND: (template: string) => string;
            TEMPLATE_NOT_SUPPORTED: (templateType: string) => string;
            RENDER_ERROR: (component: string, error: string) => string;
        };
        cli: {
            cleanRemoveError: (err: string) => string;
            scaffoldError: (url: string, error: string) => string;
            COMPONENT_HREF_NOT_FOUND: string;
            COMPONENTS_NOT_FOUND: string;
            DEPENDENCIES_INSTALL_FAIL: string;
            DEPENDENCY_LINK_FAIL: (dependency: string, error: string) => string;
            DEPENDENCIES_LINK_FAIL: string;
            DEV_FAIL: (error: string) => string;
            INIT_FAIL: (error: string) => string;
            INVALID_CREDENTIALS: string;
            MOCK_PLUGIN_IS_NOT_VALID: string;
            NAME_NOT_VALID: string;
            NODE_CLI_VERSION_NEEDS_UPGRADE: (version: string) => string;
            NODE_CLI_VERSION_UNSUPPORTED: (nodeVersion: string, minVersion: string) => string;
            OC_CLI_VERSION_NEEDS_UPGRADE: (command: string) => string;
            PACKAGE_CREATION_FAIL: (error: string) => string;
            PACKAGING_FAIL: (dir: string, description: string) => string;
            PACKAGE_FOLDER_MISSING: string;
            PLUGIN_MISSING_FROM_REGISTRY: (details: string, command: string) => string;
            PORT_IS_BUSY: (port: number) => string;
            PUBLISHING_FAIL: (error: string) => string;
            REGISTRY_NOT_FOUND: string;
            TEMPLATE_NOT_FOUND: (template: string) => string;
            TEMPLATE_TYPE_NOT_VALID: (template: string) => string;
            TEMPLATE_DEP_MISSING: (template: string, path: string) => string;
        };
        generic: (error: string) => string;
    };
    messages: {
        cli: {
            cleanAlreadyClean: string;
            cleanList: (list: string[]) => string;
            cleanPrompt: string;
            cleanPromptDefault: string;
            cleanSuccess: string;
            initSuccess: (componentName: string, componentPath: string) => string;
            installCompiler: (compiler: string) => string;
            installCompilerSuccess: (template: string, compiler: string, version: string) => string;
            legacyTemplateDeprecationWarning: (legacyType: string, newType: string) => string;
            CHANGES_DETECTED: (file: string) => string;
            CHECKING_DEPENDENCIES: string;
            COMPRESSING: (path: string) => string;
            COMPRESSED: (path: string) => string;
            ENTER_PASSWORD: string;
            ENTER_USERNAME: string;
            USING_CREDS: string;
            HELP_HINT: string;
            HOT_RELOADING_DISABLED: string;
            INSTALLING_DEPS: (dependencies: string, installPath: string) => string;
            LINKING_DEPENDENCIES: (dependencies: string) => string;
            MOCKED_PLUGIN: (name: string, value: string) => string;
            NO_SUCH_COMMAND: (command: string) => string;
            PACKAGING: (dir: string) => string;
            PACKAGED: (dir: string) => string;
            PACKAGING_COMPONENTS: string;
            PUBLISHED: (component: string) => string;
            PUBLISHING: (component: string) => string;
            REGISTERING_MOCKED_PLUGINS: string;
            REGISTRY_ADDED: string;
            REGISTRY_CREDENTIALS_REQUIRED: string;
            REGISTRY_LIST: string;
            REGISTRY_REMOVED: string;
            REGISTRY_STARTING: (url: string) => string;
            REGISTRY_LIVERELOAD_STARTING: (port: string) => string;
            RETRYING_10_SECONDS: string;
            SCANNING_COMPONENTS: string;
        };
    };
};
export default _default;
