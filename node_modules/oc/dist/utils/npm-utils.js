"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependency = exports.installDependencies = exports.init = void 0;
const path_1 = __importDefault(require("path"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const strip_version_1 = __importDefault(require("./strip-version"));
const buildInstallCommand = (options) => {
    const args = ['install'];
    if (options.usePrefix) {
        args.push('--prefix', options.installPath);
    }
    if (options.save) {
        args.push('--save-exact');
        args.push(options.isDev ? '--save-dev' : '--save');
    }
    else {
        args.push('--no-save');
    }
    return args;
};
const executeCommand = (options) => {
    const cmd = (0, cross_spawn_1.default)('npm', [...options.command, '--no-package-lock'], {
        cwd: options.path,
        stdio: options.silent ? 'ignore' : 'inherit'
    });
    return new Promise((res, rej) => {
        cmd.on('error', () => rej(new Error('error')));
        cmd.on('close', code => {
            if (code !== 0) {
                rej(code);
            }
            else {
                res();
            }
        });
    });
};
const getFullPath = ({ installPath, dependency }) => path_1.default.join(installPath, 'node_modules', (0, strip_version_1.default)(dependency));
const init = (options) => {
    const { initPath, silent } = options;
    const npminit = ['init', '--yes'];
    const cmdOptions = { path: initPath, command: npminit, silent };
    return executeCommand(cmdOptions);
};
exports.init = init;
const installDependencies = async (options) => {
    const { dependencies, installPath, silent } = options;
    const npmi = buildInstallCommand(options);
    const cmdOptions = {
        command: [...npmi, ...dependencies],
        path: installPath,
        silent
    };
    const dest = dependencies.map(dependency => getFullPath({ installPath, dependency }));
    await executeCommand(cmdOptions);
    return { dest };
};
exports.installDependencies = installDependencies;
const installDependency = async (options) => {
    const { dependency, installPath, silent } = options;
    const npmi = buildInstallCommand(options);
    const cmdOptions = {
        command: [...npmi, dependency],
        path: installPath,
        silent
    };
    const dest = getFullPath({ installPath, dependency });
    await executeCommand(cmdOptions);
    return { dest };
};
exports.installDependency = installDependency;
