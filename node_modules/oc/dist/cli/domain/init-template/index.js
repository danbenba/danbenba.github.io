"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const install_template_1 = __importDefault(require("./install-template"));
const npm = __importStar(require("../../../utils/npm-utils"));
const scaffold_1 = __importDefault(require("./scaffold"));
async function initTemplate(options) {
    const { compiler, componentPath } = options;
    const compilerPath = path_1.default.join(componentPath, 'node_modules', compiler);
    const npmOptions = { initPath: componentPath, silent: true };
    await fs_extra_1.default.ensureDir(componentPath);
    await npm.init(npmOptions);
    await (0, install_template_1.default)(options);
    await (0, scaffold_1.default)(Object.assign(options, { compilerPath }));
    return { ok: true };
}
exports.default = initTemplate;
