"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const resources_1 = __importDefault(require("../../../resources"));
async function scaffold(options) {
    var _a, _b;
    const { compiler, compilerPath, componentName, componentPath, templateType } = options;
    const baseComponentPath = path_1.default.join(compilerPath, 'scaffold');
    const baseComponentFiles = path_1.default.join(baseComponentPath, 'src');
    const compilerPackage = await fs_extra_1.default.readJson(path_1.default.join(compilerPath, 'package.json'));
    try {
        await fs_extra_1.default.copy(baseComponentFiles, componentPath);
        const componentPackage = await fs_extra_1.default.readJson(path_1.default.join(componentPath, 'package.json'));
        componentPackage.name = componentName;
        componentPackage.scripts ?? (componentPackage.scripts = {});
        (_a = componentPackage.scripts).start ?? (_a.start = `oc dev .. --components ${componentName}`);
        (_b = componentPackage.scripts).build ?? (_b.build = `oc package .`);
        componentPackage.devDependencies[compiler] = compilerPackage.version;
        await fs_extra_1.default.writeJson(componentPath + '/package.json', componentPackage, {
            spaces: 2
        });
        return { ok: true };
    }
    catch (error) {
        const url = (compilerPackage.bugs && compilerPackage.bugs.url) ||
            `the ${templateType} repo`;
        throw resources_1.default.errors.cli.scaffoldError(url, String(error));
    }
}
exports.default = scaffold;
