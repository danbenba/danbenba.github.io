"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const try_require_1 = __importDefault(require("try-require"));
const is_template_valid_1 = __importDefault(require("../../../utils/is-template-valid"));
const npm = __importStar(require("../../../utils/npm-utils"));
const resources_1 = __importDefault(require("../../../resources"));
async function installTemplate(options) {
    const { compiler, componentPath, logger, templateType } = options;
    const errorMessage = 'template type not valid';
    const npmOptions = {
        dependency: compiler,
        installPath: componentPath,
        isDev: true,
        save: true,
        usePrefix: false
    };
    logger.log(resources_1.default.messages.cli.installCompiler(compiler));
    try {
        const result = await npm.installDependency(npmOptions);
        const installedCompiler = (0, try_require_1.default)(result.dest);
        if (!(0, is_template_valid_1.default)(installedCompiler, { compiler: true })) {
            throw errorMessage;
        }
        const version = installedCompiler.getInfo().version;
        logger.log(resources_1.default.messages.cli.installCompilerSuccess(templateType, compiler, version));
        return { ok: true };
    }
    catch (err) {
        throw errorMessage;
    }
}
exports.default = installTemplate;
