"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const targz_1 = __importDefault(require("targz"));
const util_1 = require("util");
const clean = __importStar(require("./clean"));
const get_components_by_dir_1 = __importDefault(require("./get-components-by-dir"));
const init_template_1 = __importDefault(require("./init-template"));
const is_template_legacy_1 = __importDefault(require("../../utils/is-template-legacy"));
const mock_1 = __importDefault(require("./mock"));
const package_components_1 = __importDefault(require("./package-components"));
const resources_1 = __importDefault(require("../../resources"));
const validator = __importStar(require("../../registry/domain/validators"));
function local() {
    return {
        clean,
        cleanup(compressedPackagePath) {
            return fs_extra_1.default.unlink(compressedPackagePath);
        },
        compress(input, output) {
            return (0, util_1.promisify)(targz_1.default.compress)({
                src: input,
                dest: output,
                tar: {
                    map: function (file) {
                        return Object.assign(file, {
                            name: `_package/${file.name}`
                        });
                    }
                }
            });
        },
        getComponentsByDir: (0, get_components_by_dir_1.default)(),
        async init(options) {
            const { componentName, logger } = options;
            let { templateType } = options;
            if (!validator.validateComponentName(componentName)) {
                throw 'name not valid';
            }
            // LEGACY TEMPLATES WARNING
            if ((0, is_template_legacy_1.default)(templateType)) {
                const legacyName = templateType;
                templateType = legacyName.replace(legacyName, `oc-template-${legacyName}`);
                logger.warn(resources_1.default.messages.cli.legacyTemplateDeprecationWarning(legacyName, templateType));
            }
            try {
                await (0, init_template_1.default)(Object.assign(options, {
                    templateType,
                    compiler: `${templateType}-compiler`
                }));
            }
            catch (e) {
                throw 'template type not valid';
            }
        },
        mock: (0, mock_1.default)(),
        package: (0, package_components_1.default)()
    };
}
exports.default = local;
