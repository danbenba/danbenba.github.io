"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const builtin_modules_1 = __importDefault(require("builtin-modules"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const ensure_compiler_is_declared_as_devDependency_1 = __importDefault(require("./ensure-compiler-is-declared-as-devDependency"));
const get_compiler_1 = __importDefault(require("./get-compiler"));
const install_missing_dependencies_1 = __importDefault(require("./install-missing-dependencies"));
const link_missing_dependencies_1 = __importDefault(require("./link-missing-dependencies"));
const is_template_legacy_1 = __importDefault(require("../../../utils/is-template-legacy"));
const resources_1 = __importDefault(require("../../../resources"));
const getComponentPackageJson = (componentPath) => fs_extra_1.default.readJson(path_1.default.join(componentPath, 'package.json'));
const union = (a, b) => [
    ...new Set([...a, ...b])
];
async function handleDependencies(options) {
    const { components, logger, useComponentDependencies } = options;
    const dependencies = {};
    const addDependencies = (componentDependencies) => Object.entries(componentDependencies || {}).forEach(([dependency, version]) => {
        dependencies[dependency] = version;
    });
    const templates = {};
    const addTemplate = (templateName, template) => {
        templates[templateName] = template;
    };
    const setupComponentDependencies = async (componentPath) => {
        const pkg = await getComponentPackageJson(componentPath);
        addDependencies(pkg.dependencies);
        const template = pkg.oc.files.template.type;
        if ((0, is_template_legacy_1.default)(template)) {
            return;
        }
        const compilerDep = (0, ensure_compiler_is_declared_as_devDependency_1.default)({
            componentPath,
            pkg,
            template
        });
        Object.assign(options, { compilerDep });
        const compiler = await (0, get_compiler_1.default)({
            compilerDep,
            componentPath,
            logger,
            pkg: pkg
        });
        Object.assign(options, { compiler });
        addTemplate(template, compiler);
    };
    logger.warn(resources_1.default.messages.cli.CHECKING_DEPENDENCIES);
    for (const component of components) {
        await setupComponentDependencies(component);
    }
    const result = {
        modules: union(builtin_modules_1.default, Object.keys(dependencies)).sort(),
        templates: Object.values(templates)
    };
    if (useComponentDependencies) {
        (0, link_missing_dependencies_1.default)({
            componentPath: components[0],
            dependencies,
            logger
        });
        return result;
    }
    await (0, install_missing_dependencies_1.default)({ dependencies, logger });
    return result;
}
exports.default = handleDependencies;
