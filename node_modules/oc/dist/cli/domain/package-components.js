"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const util_1 = require("util");
const path_1 = __importDefault(require("path"));
const require_template_1 = __importDefault(require("./handle-dependencies/require-template"));
const validator = __importStar(require("../../registry/domain/validators"));
const packageComponents = () => async (options) => {
    const production = options.production;
    const componentPath = options.componentPath;
    const minify = options.minify === true;
    const verbose = options.verbose === true;
    const publishPath = path_1.default.join(componentPath, '_package');
    const componentPackagePath = path_1.default.join(componentPath, 'package.json');
    const ocPackagePath = path_1.default.join(__dirname, '../../../package.json');
    if (!fs_extra_1.default.existsSync(componentPackagePath)) {
        throw new Error('component does not contain package.json');
    }
    else if (!fs_extra_1.default.existsSync(ocPackagePath)) {
        throw new Error('error resolving oc internal dependencies');
    }
    await fs_extra_1.default.emptyDir(publishPath);
    const componentPackage = await fs_extra_1.default.readJson(componentPackagePath);
    const ocPackage = await fs_extra_1.default.readJson(ocPackagePath);
    if (!validator.validateComponentName(componentPackage.name)) {
        throw new Error('name not valid');
    }
    const type = componentPackage.oc.files.template.type;
    const compileOptions = {
        publishPath,
        componentPath,
        componentPackage,
        ocPackage,
        minify,
        verbose,
        production
    };
    const ocTemplate = (0, require_template_1.default)(type, {
        compiler: true,
        componentPath
    });
    const compile = (0, util_1.promisify)(ocTemplate.compile);
    return compile(compileOptions);
};
exports.default = packageComponents;
