import { Logger } from './logger';
import dev from './facade/dev';
import init from './facade/init';
import mock from './facade/mock';
import packageScript from './facade/package';
import publish from './facade/publish';
import preview from './facade/preview';
import registryAdd from './facade/registry-add';
import registryLs from './facade/registry-ls';
import registryRemove from './facade/registry-remove';
type Options<T extends (...args: any) => any> = Parameters<ReturnType<T>>[0];
type Cb<T extends (...args: any) => any> = Parameters<ReturnType<T>>[1];
declare const _default: {
    dev: ({ logger, ...options }: {
        prefix: string;
        dirPath: string;
        port?: number | undefined;
        baseUrl: string;
        fallbackRegistryUrl: string;
        hotReloading?: boolean | undefined;
        components?: string[] | undefined;
        watch?: boolean | undefined;
        verbose?: boolean | undefined;
        production?: boolean | undefined;
    } & {
        logger: Logger;
    }, cb: Cb<typeof dev>) => void;
    init: ({ logger, ...options }: {
        componentName: string;
        componentPath: string;
        templateType: string;
    } & {
        logger: Logger;
    }, cb: Cb<typeof init>) => void;
    mock: ({ logger, ...options }: {
        targetType: string;
        targetValue: string;
        targetName: string;
    } & {
        logger: Logger;
    }, cb: Cb<typeof mock>) => void;
    package: ({ logger, ...options }: {
        componentPath: string;
        useComponentDependencies?: boolean | undefined;
        compress?: boolean | undefined;
    } & {
        logger: Logger;
    }, cb: Cb<typeof packageScript>) => void;
    publish: ({ logger, ...options }: {
        componentPath: string;
        skipPackage?: boolean | undefined;
        username?: string | undefined;
        password?: string | undefined;
        registries?: string[] | undefined;
    } & {
        logger: Logger;
        registry?: string | undefined;
    }, cb: Cb<typeof publish>) => void;
    preview: ({ logger, ...options }: {
        componentHref: string;
    } & {
        logger: Logger;
        registry?: string | undefined;
    }, cb: Cb<typeof preview>) => void;
    registry: {
        add: ({ logger, ...options }: {
            registryUrl: string;
        } & {
            logger: Logger;
            registry?: string | undefined;
        }, cb: Cb<typeof registryAdd>) => void;
        ls: ({ logger, ...options }: {
            logger: Logger;
            registry?: string | undefined;
        }, cb: Cb<typeof registryLs>) => void;
        remove: ({ logger, ...options }: {
            registryUrl: string;
        } & {
            logger: Logger;
            registry?: string | undefined;
        }, cb: Cb<typeof registryRemove>) => void;
    };
};
export default _default;
