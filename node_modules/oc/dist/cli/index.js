"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const commands_1 = __importDefault(require("./commands"));
const semver_1 = __importDefault(require("semver"));
const lodash_1 = __importDefault(require("lodash"));
const local_1 = __importDefault(require("./domain/local"));
const logger_1 = __importDefault(require("./logger"));
const registry_1 = __importDefault(require("./domain/registry"));
const resources_1 = __importDefault(require("../resources"));
const validate_command_1 = __importDefault(require("./validate-command"));
const clean_1 = __importDefault(require("./facade/clean"));
const dev_1 = __importDefault(require("./facade/dev"));
const init_1 = __importDefault(require("./facade/init"));
const mock_1 = __importDefault(require("./facade/mock"));
const package_1 = __importDefault(require("./facade/package"));
const preview_1 = __importDefault(require("./facade/preview"));
const publish_1 = __importDefault(require("./facade/publish"));
const registry_2 = __importDefault(require("./facade/registry"));
const registry_add_1 = __importDefault(require("./facade/registry-add"));
const registry_ls_1 = __importDefault(require("./facade/registry-ls"));
const registry_remove_1 = __importDefault(require("./facade/registry-remove"));
const cliFunctions = {
    clean: clean_1.default,
    dev: dev_1.default,
    init: init_1.default,
    mock: mock_1.default,
    package: package_1.default,
    preview: preview_1.default,
    publish: publish_1.default,
    registry: registry_2.default,
    'registry-add': registry_add_1.default,
    'registry-ls': registry_ls_1.default,
    'registry-remove': registry_remove_1.default
};
const currentNodeVersion = process.version;
const minSupportedVersion = '6.0.0';
if (semver_1.default.lt(currentNodeVersion, minSupportedVersion)) {
    logger_1.default.err(resources_1.default.errors.cli.NODE_CLI_VERSION_UNSUPPORTED(currentNodeVersion, minSupportedVersion));
}
const dependencies = {
    local: (0, local_1.default)(),
    logger: logger_1.default,
    registry: (0, registry_1.default)()
};
function processCommand(command, commandName, cli, lvl, prefix = '') {
    const level = (lvl || 0) + 1;
    const facade = cliFunctions[`${prefix}${commandName}`](dependencies);
    cli.command(command.cmd || commandName, command.description, yargs => {
        yargs.usage(command.usage);
        if (command.options) {
            yargs.options(command.options);
        }
        if (command.commands) {
            yargs
                .check(argv => (0, validate_command_1.default)(argv, level))
                .epilogue(resources_1.default.messages.cli.HELP_HINT);
            const newPrefix = (prefix ? prefix + '-' : '') + commandName + '-';
            lodash_1.default.mapValues(command.commands, (commandConfiguration, commandName) => {
                processCommand(commandConfiguration, commandName, yargs, level, newPrefix);
            });
        }
        if (command.example) {
            yargs.example(command.example.cmd, command.example.description || command.description);
        }
        return yargs;
    }, options => {
        // @ts-ignore not callable
        facade(options).catch(() => {
            process.exit(1);
        });
    });
}
Object.entries(commands_1.default.commands).forEach(([commandName, command]) => {
    processCommand(command, commandName, yargs_1.default);
});
const argv = yargs_1.default
    .completion()
    .check(argv => (0, validate_command_1.default)(argv, 0))
    .usage(commands_1.default.usage)
    .epilogue(resources_1.default.messages.cli.HELP_HINT)
    .help('h')
    .alias('h', 'help')
    .version()
    .wrap(yargs_1.default.terminalWidth()).argv;
if (argv._.length === 0) {
    yargs_1.default.showHelp();
}
