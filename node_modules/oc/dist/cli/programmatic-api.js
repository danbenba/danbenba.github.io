"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const local_1 = __importDefault(require("./domain/local"));
const registry_1 = __importDefault(require("./domain/registry"));
const dev_1 = __importDefault(require("./facade/dev"));
const init_1 = __importDefault(require("./facade/init"));
const mock_1 = __importDefault(require("./facade/mock"));
const package_1 = __importDefault(require("./facade/package"));
const publish_1 = __importDefault(require("./facade/publish"));
const preview_1 = __importDefault(require("./facade/preview"));
const registry_add_1 = __importDefault(require("./facade/registry-add"));
const registry_ls_1 = __importDefault(require("./facade/registry-ls"));
const registry_remove_1 = __importDefault(require("./facade/registry-remove"));
function getDeps(options) {
    const deps = {
        local: (0, local_1.default)(),
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        logger: options.logger || { log() { }, err() { }, ok() { }, warn() { } }
    };
    return options.withRegistry
        ? { ...deps, registry: (0, registry_1.default)({ registry: options.registry }) }
        : deps;
}
exports.default = {
    dev: ({ logger, ...options }, cb) => {
        const deps = getDeps({ logger });
        (0, dev_1.default)(deps)(options, cb);
    },
    init: ({ logger, ...options }, cb) => {
        const deps = getDeps({ logger });
        (0, init_1.default)(deps)(options, cb);
    },
    mock: ({ logger, ...options }, cb) => {
        const deps = getDeps({ logger });
        (0, mock_1.default)(deps)(options, cb);
    },
    package: ({ logger, ...options }, cb) => {
        const deps = getDeps({ logger });
        (0, package_1.default)(deps)(options, cb);
    },
    publish: ({ logger, ...options }, cb) => {
        const deps = getDeps({ logger, withRegistry: true });
        (0, publish_1.default)(deps)(options, cb);
    },
    preview: ({ logger, ...options }, cb) => {
        const deps = getDeps({ logger, withRegistry: true });
        (0, preview_1.default)(deps)(options, cb);
    },
    registry: {
        add: ({ logger, ...options }, cb) => {
            const deps = getDeps({ logger, withRegistry: true });
            (0, registry_add_1.default)(deps)(options, cb);
        },
        ls: ({ logger, ...options }, cb) => {
            const deps = getDeps({ logger, withRegistry: true });
            (0, registry_ls_1.default)(deps)(options, cb);
        },
        remove: ({ logger, ...options }, cb) => {
            const deps = getDeps({ logger, withRegistry: true });
            (0, registry_remove_1.default)(deps)(options, cb);
        }
    }
};
