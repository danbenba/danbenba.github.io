"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const read_1 = __importDefault(require("read"));
const universalify_1 = require("universalify");
const util_1 = require("util");
const index_1 = __importDefault(require("../../resources/index"));
const read = (0, util_1.promisify)(read_1.default);
const clean = ({ local: { clean: { fetchList, remove } }, logger }) => {
    const { cleanAlreadyClean, cleanList, cleanPrompt, cleanPromptDefault, cleanSuccess } = index_1.default.messages.cli;
    const prompt = async () => {
        try {
            const result = await read({
                prompt: cleanPrompt,
                default: cleanPromptDefault
            });
            const lowered = result.toLowerCase().trim();
            return lowered === 'y' || lowered === 'yes';
        }
        catch (err) {
            return false;
        }
    };
    const removeFolders = async (list) => {
        try {
            await remove(list);
            logger.ok(cleanSuccess);
        }
        catch (err) {
            logger.err(index_1.default.errors.cli.cleanRemoveError(String(err)));
            throw err;
        }
    };
    return (0, universalify_1.fromPromise)(async (opts) => {
        try {
            const list = await fetchList(opts.dirPath);
            if (list.length === 0) {
                logger.ok(cleanAlreadyClean);
                return;
            }
            logger.warn(cleanList(list));
            const shouldConfirm = !opts.yes;
            if (shouldConfirm) {
                const confirmed = await prompt();
                if (!confirmed)
                    return;
            }
            await removeFolders(list);
        }
        catch (err) {
            logger.err(index_1.default.errors.generic(String(err)));
            throw err;
        }
    });
};
exports.default = clean;
