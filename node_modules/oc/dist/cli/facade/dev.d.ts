/// <reference types="node" />
/// <reference types="express" />
/// <reference types="node/http" />
/// <reference types="got/dist/source/core/utils/timed-out" />
import { Logger } from '../logger';
import type { Local } from '../domain/local';
declare const dev: ({ local, logger }: {
    logger: Logger;
    local: Local;
}) => {
    (opts: {
        prefix: string;
        dirPath: string;
        port?: number | undefined;
        baseUrl: string;
        fallbackRegistryUrl: string;
        hotReloading?: boolean | undefined;
        components?: string[] | undefined;
        watch?: boolean | undefined;
        verbose?: boolean | undefined;
        production?: boolean | undefined;
    }): Promise<{
        close: (callback: (err?: string | Error | undefined) => void) => void | import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
        on: <T extends keyof {
            error: {
                code: string;
                message: string;
            };
            start: unknown;
            'cache-poll': number;
            request: import("../../registry/domain/events-handler").RequestData;
            'component-retrieved': {
                headers: import("http").IncomingHttpHeaders;
                name: string;
                parameters: import("http").IncomingHttpHeaders;
                requestVersion: string;
                duration: number;
            };
            'data-provider-error': {
                name: string;
                version: string;
                parameters: Record<string, string | number | boolean>;
                requestVersion: string;
                status: number;
                error: Error;
            };
        }>(eventName: T, listener: (data: {
            error: {
                code: string;
                message: string;
            };
            start: unknown;
            'cache-poll': number;
            request: import("../../registry/domain/events-handler").RequestData;
            'component-retrieved': {
                headers: import("http").IncomingHttpHeaders;
                name: string;
                parameters: import("http").IncomingHttpHeaders;
                requestVersion: string;
                duration: number;
            };
            'data-provider-error': {
                name: string;
                version: string;
                parameters: Record<string, string | number | boolean>;
                requestVersion: string;
                status: number;
                error: Error;
            };
        }[T]) => void) => void;
        register: (plugin: Omit<import("../../types").Plugin, "callback">, callback?: ((...args: any[]) => void) | undefined) => void;
        start: (callback: (err: unknown, data?: {
            app: import("express").Express;
            server: import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
        } | undefined) => void) => Promise<void>;
        app: import("express").Express;
    }>;
    (arguments__0: {
        prefix: string;
        dirPath: string;
        port?: number | undefined;
        baseUrl: string;
        fallbackRegistryUrl: string;
        hotReloading?: boolean | undefined;
        components?: string[] | undefined;
        watch?: boolean | undefined;
        verbose?: boolean | undefined;
        production?: boolean | undefined;
    }, arguments__1: (error: unknown, value: {
        close: (callback: (err?: string | Error | undefined) => void) => void | import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
        on: <T extends keyof {
            error: {
                code: string;
                message: string;
            };
            start: unknown;
            'cache-poll': number;
            request: import("../../registry/domain/events-handler").RequestData;
            'component-retrieved': {
                headers: import("http").IncomingHttpHeaders;
                name: string;
                parameters: import("http").IncomingHttpHeaders;
                requestVersion: string;
                duration: number;
            };
            'data-provider-error': {
                name: string;
                version: string;
                parameters: Record<string, string | number | boolean>;
                requestVersion: string;
                status: number;
                error: Error;
            };
        }>(eventName: T, listener: (data: {
            error: {
                code: string;
                message: string;
            };
            start: unknown;
            'cache-poll': number;
            request: import("../../registry/domain/events-handler").RequestData;
            'component-retrieved': {
                headers: import("http").IncomingHttpHeaders;
                name: string;
                parameters: import("http").IncomingHttpHeaders;
                requestVersion: string;
                duration: number;
            };
            'data-provider-error': {
                name: string;
                version: string;
                parameters: Record<string, string | number | boolean>;
                requestVersion: string;
                status: number;
                error: Error;
            };
        }[T]) => void) => void;
        register: (plugin: Omit<import("../../types").Plugin, "callback">, callback?: ((...args: any[]) => void) | undefined) => void;
        start: (callback: (err: unknown, data?: {
            app: import("express").Express;
            server: import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
        } | undefined) => void) => Promise<void>;
        app: import("express").Express;
    }) => void): void;
};
export default dev;
