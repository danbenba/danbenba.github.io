"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("../../resources/index"));
const path_1 = __importDefault(require("path"));
const universalify_1 = require("universalify");
const handle_dependencies_1 = __importDefault(require("../domain/handle-dependencies"));
const cliPackage = ({ local, logger }) => (0, universalify_1.fromPromise)(async (opts) => {
    const componentPath = opts.componentPath;
    const useComponentDependencies = opts.useComponentDependencies;
    const packageDir = path_1.default.resolve(componentPath, '_package');
    const compressedPackagePath = path_1.default.resolve(componentPath, 'package.tar.gz');
    logger.warn(index_1.default.messages.cli.PACKAGING(packageDir));
    try {
        await (0, handle_dependencies_1.default)({
            components: [path_1.default.resolve(componentPath)],
            logger,
            useComponentDependencies
        });
        const packageOptions = {
            production: true,
            componentPath: path_1.default.resolve(componentPath)
        };
        const component = await local.package(packageOptions).catch(err => {
            logger.err(index_1.default.errors.cli.PACKAGE_CREATION_FAIL(String(err)));
            return Promise.reject(err);
        });
        logger.ok(index_1.default.messages.cli.PACKAGED(packageDir));
        if (opts.compress) {
            logger.warn(index_1.default.messages.cli.COMPRESSING(compressedPackagePath));
            await local.compress(packageDir, compressedPackagePath).catch(err => {
                logger.err(index_1.default.errors.cli.PACKAGE_CREATION_FAIL(String(err)));
                return Promise.reject(err);
            });
            logger.ok(index_1.default.messages.cli.COMPRESSED(compressedPackagePath));
            return component;
        }
        else {
            return component;
        }
    }
    catch (err) {
        logger.err(String(err));
        throw err;
    }
});
exports.default = cliPackage;
