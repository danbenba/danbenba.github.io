"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const safe_1 = __importDefault(require("colors/safe"));
const getport_1 = __importDefault(require("getport"));
const livereload_1 = __importDefault(require("livereload"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const universalify_1 = require("universalify");
const get_mocked_plugins_1 = __importDefault(require("../domain/get-mocked-plugins"));
const handle_dependencies_1 = __importDefault(require("../domain/handle-dependencies"));
const oc = __importStar(require("../../index"));
const index_1 = __importDefault(require("../../resources/index"));
const watch_1 = __importDefault(require("../domain/watch"));
const cliMessages = index_1.default.messages.cli;
const cliErrors = index_1.default.errors.cli;
const delay = (time = 0) => new Promise(res => setTimeout(res, time));
const getPort = (0, util_1.promisify)(getport_1.default);
const dev = ({ local, logger }) => (0, universalify_1.fromPromise)(async (opts) => {
    const componentsDir = opts.dirPath;
    const port = opts.port || 3000;
    const baseUrl = opts.baseUrl || `http://localhost:${port}/`;
    const fallbackRegistryUrl = opts.fallbackRegistryUrl;
    const hotReloading = typeof opts.hotReloading === 'undefined' ? true : opts.hotReloading;
    const optWatch = typeof opts.watch === 'undefined' ? true : opts.watch;
    let packaging = false;
    const watchForChanges = function ({ components, refreshLiveReload }, cb) {
        (0, watch_1.default)(components, componentsDir, (err, changedFile, componentDir) => {
            if (err) {
                logger.err(index_1.default.errors.generic(String(err)));
            }
            else {
                logger.warn(cliMessages.CHANGES_DETECTED(changedFile));
                if (!hotReloading) {
                    logger.warn(cliMessages.HOT_RELOADING_DISABLED);
                }
                else if (!componentDir) {
                    cb(components, refreshLiveReload);
                }
                else {
                    cb([componentDir], refreshLiveReload);
                }
            }
        });
    };
    const packageComponents = async (componentsDirs) => {
        if (!packaging) {
            packaging = true;
            logger.warn(cliMessages.PACKAGING_COMPONENTS, false);
            for (const dir of componentsDirs) {
                logger.warn(cliMessages.PACKAGING(dir), false);
                const packageOptions = {
                    componentPath: dir,
                    minify: false,
                    verbose: opts.verbose,
                    production: opts.production
                };
                try {
                    await local.package(packageOptions);
                    packaging = false;
                    logger.ok('OK');
                }
                catch (error) {
                    const errorDescription = error instanceof SyntaxError || !!error.message
                        ? error.message
                        : error;
                    logger.err(cliErrors.PACKAGING_FAIL(dir, String(errorDescription)));
                    logger.warn(cliMessages.RETRYING_10_SECONDS);
                    await delay(10000);
                    packaging = false;
                    packageComponents(componentsDirs);
                }
            }
        }
    };
    const registerPlugins = (registry) => {
        const mockedPlugins = (0, get_mocked_plugins_1.default)(logger, componentsDir);
        mockedPlugins.forEach(p => registry.register(p));
        registry.on('request', data => {
            if (data.errorCode === 'PLUGIN_MISSING_FROM_REGISTRY') {
                logger.err(cliErrors.PLUGIN_MISSING_FROM_REGISTRY(String(data.errorDetails), safe_1.default.blue(index_1.default.commands.cli.MOCK_PLUGIN)));
            }
        });
    };
    logger.warn(cliMessages.SCANNING_COMPONENTS, true);
    const components = await local.getComponentsByDir(componentsDir, opts.components);
    if (!components.length) {
        const err = cliErrors.DEV_FAIL(cliErrors.COMPONENTS_NOT_FOUND);
        logger.err(err);
        throw err;
    }
    logger.ok('OK');
    components.forEach(component => logger.log(safe_1.default.green('├── ') + component));
    const dependencies = await (0, handle_dependencies_1.default)({
        components,
        logger
    }).catch(err => {
        logger.err(err);
        return Promise.reject(err);
    });
    await packageComponents(components);
    let liveReload = {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        refresher: () => { },
        port: undefined
    };
    if (hotReloading) {
        const otherPort = await getPort(port + 1).catch(err => {
            logger.err(String(err));
            return Promise.reject(err);
        });
        const liveReloadServer = livereload_1.default.createServer({
            port: otherPort
        });
        const refresher = () => liveReloadServer.refresh('/');
        liveReload = { refresher, port: otherPort };
    }
    const registry = oc.Registry({
        baseUrl,
        prefix: opts.prefix || '',
        dependencies: dependencies.modules,
        discovery: true,
        env: { name: 'local' },
        fallbackRegistryUrl,
        hotReloading,
        liveReloadPort: liveReload.port,
        local: true,
        components: opts.components,
        path: path_1.default.resolve(componentsDir),
        port,
        templates: dependencies.templates,
        verbosity: 1
    });
    registerPlugins(registry);
    logger.warn(cliMessages.REGISTRY_STARTING(baseUrl));
    if (liveReload.port) {
        logger.warn(cliMessages.REGISTRY_LIVERELOAD_STARTING(String(liveReload.port)));
    }
    try {
        await (0, util_1.promisify)(registry.start)();
        if (optWatch) {
            watchForChanges({ components, refreshLiveReload: liveReload.refresher }, packageComponents);
        }
        return registry;
    }
    catch (err) {
        const error = err.code === 'EADDRINUSE' ? cliErrors.PORT_IS_BUSY(port) : err;
        logger.err(String(error));
        throw error;
    }
});
exports.default = dev;
