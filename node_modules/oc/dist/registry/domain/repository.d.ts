import { Component, ComponentsDetails, Config, TemplateInfo } from '../../types';
export default function repository(conf: Config): {
    getCompiledView(componentName: string, componentVersion: string): Promise<string>;
    getComponent(componentName: string, componentVersion?: string): Promise<Component>;
    getComponentInfo(componentName: string, componentVersion: string): Promise<Component>;
    getComponentPath(componentName: string, componentVersion: string): string;
    getComponents(): Promise<string[]>;
    getComponentsDetails(): Promise<ComponentsDetails>;
    getComponentVersions(componentName: string): Promise<string[]>;
    getDataProvider(componentName: string, componentVersion: string): Promise<{
        content: string;
        filePath: string;
    }>;
    getEnv(componentName: string, componentVersion: string): Promise<Record<string, string>>;
    getStaticClientPath: () => string;
    getStaticClientMapPath: () => string;
    getStaticFilePath: (componentName: string, componentVersion: string, filePath: string) => string;
    getTemplatesInfo: () => TemplateInfo[];
    getTemplate: (type: string) => import("../../types").Template;
    init(): Promise<ComponentsDetails | undefined>;
    publishComponent(pkgDetails: {
        outputFolder: string;
        packageJson: Component;
    }, componentName: string, componentVersion: string): Promise<ComponentsDetails>;
};
export type Repository = ReturnType<typeof repository>;
