"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const settings_1 = __importDefault(require("../../resources/settings"));
const auth = __importStar(require("./authentication"));
const DEFAULT_NODE_KEEPALIVE_MS = 5000;
function optionsSanitiser(input) {
    const options = { ...input };
    if (!options.publishAuth) {
        options.beforePublish = (_req, _res, next) => next();
    }
    else {
        options.beforePublish = auth.middleware(options.publishAuth);
    }
    if (!options.publishValidation) {
        options.publishValidation = () => ({
            isValid: true
        });
    }
    if (!options.prefix) {
        options.prefix = '/';
    }
    const hasTrailingPrefix = new RegExp(options.prefix + '$');
    if (!options.baseUrl.match(hasTrailingPrefix)) {
        options.baseUrl = options.baseUrl.replace(/\/$/, '') + options.prefix;
    }
    if (!options.tempDir) {
        options.tempDir = settings_1.default.registry.defaultTempPath;
    }
    if (typeof options.hotReloading !== 'boolean') {
        options.hotReloading = !!options.local;
    }
    if (!options.verbosity) {
        options.verbosity = 0;
    }
    if (typeof options.discovery === 'undefined') {
        options.discovery = true;
    }
    if (typeof options.pollingInterval === 'undefined') {
        options.pollingInterval = 5;
    }
    if (!options.templates) {
        options.templates = [];
    }
    if (!options.dependencies) {
        options.dependencies = [];
    }
    if (typeof options.tarExtractMode === 'undefined') {
        options.tarExtractMode = 766;
    }
    if (typeof options.fallbackRegistryUrl !== 'undefined' &&
        !options.fallbackRegistryUrl.endsWith('/')) {
        options.fallbackRegistryUrl += '/';
    }
    options.customHeadersToSkipOnWeakVersion = (options.customHeadersToSkipOnWeakVersion || []).map(s => s.toLowerCase());
    options.port = options.port || process.env['PORT'] || 3000;
    options.timeout = options.timeout || 1000 * 60 * 2;
    options.keepAliveTimeout =
        options.keepAliveTimeout || DEFAULT_NODE_KEEPALIVE_MS;
    if (options.s3) {
        options.storage = {
            adapter: require('oc-s3-storage-adapter'),
            options: options.s3
        };
    }
    if (options.storage && !options.storage.adapter) {
        options.storage.adapter = require('oc-s3-storage-adapter');
    }
    if (options.refreshInterval && options.storage) {
        options.storage.options['refreshInterval'] = options.refreshInterval;
    }
    if (options.verbosity && options.storage) {
        options.storage.options['verbosity'] = options.verbosity;
    }
    if (options.storage &&
        options.storage.options &&
        options.storage.options['path']) {
        options.storage.options['path'] =
            options.storage.options['path'].indexOf('http') === 0
                ? options.storage.options['path']
                : `https:${options.storage.options['path']}`;
    }
    if (!options.env) {
        options.env = {};
    }
    return options;
}
exports.default = optionsSanitiser;
