"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const p_limit_1 = __importDefault(require("p-limit"));
const lodash_1 = __importDefault(require("lodash"));
const events_handler_1 = __importDefault(require("./events-handler"));
const oc_get_unix_utc_timestamp_1 = __importDefault(require("oc-get-unix-utc-timestamp"));
function componentsDetails(conf, cdn) {
    const returnError = (code, message) => {
        events_handler_1.default.fire('error', {
            code,
            message: message?.message ?? message
        });
        throw code;
    };
    const filePath = () => `${conf.storage.options.componentsDir}/components-details.json`;
    const getFromJson = () => cdn.getJson(filePath(), true);
    const getFromDirectories = async (options) => {
        const details = Object.assign({}, lodash_1.default.cloneDeep(options.details));
        details.components = details.components || {};
        const missing = [];
        lodash_1.default.each(options.componentsList.components, (versions, name) => {
            details.components[name] = details.components[name] || {};
            lodash_1.default.each(versions, version => {
                if (!details.components[name][version]) {
                    missing.push({ name, version });
                }
            });
        });
        const limit = (0, p_limit_1.default)(cdn.maxConcurrentRequests);
        await Promise.all(missing.map(({ name, version }) => limit(async () => {
            const content = await cdn.getJson(`${conf.storage.options.componentsDir}/${name}/${version}/package.json`, true);
            details.components[name][version] = {
                publishDate: content.oc.date || 0
            };
        })));
        return {
            lastEdit: (0, oc_get_unix_utc_timestamp_1.default)(),
            components: details.components
        };
    };
    const save = (data) => cdn.putFileContent(JSON.stringify(data), filePath(), true);
    const refresh = async (componentsList) => {
        const jsonDetails = await getFromJson().catch(() => undefined);
        const dirDetails = await getFromDirectories({
            componentsList,
            details: jsonDetails
        }).catch(err => returnError('components_details_get', err));
        if (!jsonDetails ||
            !lodash_1.default.isEqual(dirDetails.components, jsonDetails.components)) {
            await save(dirDetails).catch(err => returnError('components_details_save', err));
            return dirDetails;
        }
        return jsonDetails;
    };
    return {
        get: getFromJson,
        refresh
    };
}
exports.default = componentsDetails;
