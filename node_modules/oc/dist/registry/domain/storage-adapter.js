"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const universalify_1 = require("universalify");
const officialAdapters = {
    s3: { name: 'oc-s3-storage-adapter', firstPromiseBasedVersion: '1.2.0' },
    gs: { name: 'oc-gs-storage-adapter', firstPromiseBasedVersion: '1.1.0' },
    'azure-blob-storage': {
        name: 'oc-azure-storage-adapter',
        firstPromiseBasedVersion: '0.1.0'
    }
};
function isOfficialAdapter(adapter) {
    return Object.keys(officialAdapters).includes(adapter.adapterType);
}
function isPromiseBased(tryFunction) {
    try {
        tryFunction().catch(() => {
            // To not throw unhandled promise exceptions
        });
        return true;
    }
    catch (err) {
        return false;
    }
}
function isLegacyAdapter(adapter) {
    return !isPromiseBased(() => adapter.getFile(''));
}
function convertLegacyAdapter(adapter) {
    return {
        getFile: (0, universalify_1.fromCallback)(adapter.getFile),
        getJson: (0, universalify_1.fromCallback)(adapter.getJson),
        listSubDirectories: (0, universalify_1.fromCallback)(adapter.listSubDirectories),
        putDir: (0, universalify_1.fromCallback)(adapter.putDir),
        putFile: (0, universalify_1.fromCallback)(adapter.putFile),
        putFileContent: (0, universalify_1.fromCallback)(adapter.putFileContent),
        getUrl: adapter.getUrl,
        maxConcurrentRequests: adapter.maxConcurrentRequests,
        adapterType: adapter.adapterType
    };
}
function getPromiseBasedAdapter(adapter) {
    if (isLegacyAdapter(adapter)) {
        if (isOfficialAdapter(adapter)) {
            const pkg = officialAdapters[adapter.adapterType];
            process.emitWarning(`Adapters now should work with promises. Consider upgrading your package ${pkg.name} to at least version ${pkg.firstPromiseBasedVersion}`, 'DeprecationWarning');
        }
        else {
            process.emitWarning('Your adapter is using the old interface of working with callbacks. Consider upgrading it to work with promises, as the previous one will be deprecated.', 'DeprecationWarning');
        }
        return convertLegacyAdapter(adapter);
    }
    return adapter;
}
exports.default = getPromiseBasedAdapter;
