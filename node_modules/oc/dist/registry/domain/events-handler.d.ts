/// <reference types="node" />
import { IncomingHttpHeaders } from 'http';
type Subscription<T = any> = (data: T) => void;
export interface RequestData {
    body: unknown;
    duration: number;
    headers: IncomingHttpHeaders;
    method: string;
    path: string;
    relativeUrl: string;
    query: Record<string, unknown>;
    url: string;
    statusCode: number;
    errorDetails?: string;
    errorCode?: string;
}
type Events = {
    error: {
        code: string;
        message: string;
    };
    start: unknown;
    'cache-poll': number;
    request: RequestData;
    'component-retrieved': {
        headers: IncomingHttpHeaders;
        name: string;
        parameters: IncomingHttpHeaders;
        requestVersion: string;
        duration: number;
    };
    'data-provider-error': {
        name: string;
        version: string;
        parameters: Record<string, string | boolean | number>;
        requestVersion: string;
        status: number;
        error: Error;
    };
};
type EventsHandler = {
    fire<T extends keyof Events>(eventName: T, data: Events[T]): void;
    on<T extends keyof Events>(eventName: T, listener: Subscription<Events[T]>): void;
    off<T extends keyof Events>(eventName: T, listener: Subscription<Events[T]>): void;
    reset(): void;
};
declare const eventsHandler: EventsHandler;
export default eventsHandler;
