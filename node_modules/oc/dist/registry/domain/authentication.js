"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.middleware = exports.validate = void 0;
const basic_auth_connect_1 = __importDefault(require("basic-auth-connect"));
const resources_1 = __importDefault(require("../../resources/"));
const basicAuthentication = {
    validate(authConfig) {
        const isValid = !!authConfig.username && !!authConfig.password;
        return {
            isValid,
            message: isValid
                ? ''
                : resources_1.default.errors.registry
                    .CONFIGURATION_PUBLISH_BASIC_AUTH_CREDENTIALS_MISSING
        };
    },
    middleware(authConfig) {
        return (0, basic_auth_connect_1.default)(authConfig.username, authConfig.password);
    }
};
const builtin = {
    basic: basicAuthentication
};
let scheme;
function validate(authConfig) {
    if (typeof authConfig.type !== 'string') {
        scheme = authConfig.type;
    }
    else if (builtin[authConfig.type]) {
        scheme = builtin[authConfig.type];
    }
    else {
        const moduleName = `oc-auth-${authConfig.type}`;
        try {
            scheme = require(moduleName);
        }
        catch (err) {
            return {
                isValid: false,
                message: resources_1.default.errors.registry.CONFIGURATION_PUBLISH_AUTH_MODULE_NOT_FOUND(moduleName)
            };
        }
    }
    return scheme.validate(authConfig);
}
exports.validate = validate;
function middleware(authConfig) {
    return scheme.middleware(authConfig);
}
exports.middleware = middleware;
