"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const settings_1 = __importDefault(require("../../resources/settings"));
const resources_1 = __importDefault(require("../../resources"));
function nestedRenderer(rendererWithCallback, conf) {
    const renderer = (options) => new Promise((res, rej) => {
        rendererWithCallback(options, result => {
            if (result.response.error) {
                rej(result.response.error);
            }
            else {
                res(result.response.html);
            }
        });
    });
    return {
        renderComponent(componentName, options = {}) {
            if (!componentName) {
                throw new Error(resources_1.default.errors.registry.NESTED_RENDERER_COMPONENT_NAME_IS_NOT_VALID);
            }
            return renderer({
                conf: conf,
                ip: options.ip || '',
                headers: {
                    ...options.headers,
                    accept: settings_1.default.registry.acceptRenderedHeader
                },
                name: componentName,
                parameters: options.parameters || {},
                version: options.version || ''
            });
        },
        renderComponents(components, options = {}) {
            if (!components || !components.length) {
                throw new Error(resources_1.default.errors.registry.NESTED_RENDERER_COMPONENTS_IS_NOT_VALID);
            }
            return Promise.all(components.map(component => {
                return renderer({
                    conf: conf,
                    headers: {
                        ...options.headers,
                        accept: settings_1.default.registry.acceptRenderedHeader
                    },
                    ip: component.ip || '',
                    name: component.name,
                    parameters: {
                        ...options.parameters,
                        ...component.parameters
                    },
                    version: component.version || ''
                }).catch(err => new Error(err));
            }));
        }
    };
}
exports.default = nestedRenderer;
