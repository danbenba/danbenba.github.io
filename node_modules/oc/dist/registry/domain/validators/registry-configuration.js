"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const auth = __importStar(require("../authentication"));
const resources_1 = __importDefault(require("../../../resources"));
function registryConfiguration(conf) {
    const returnError = (message) => {
        return {
            isValid: false,
            message: message || 'registry configuration is not valid'
        };
    };
    if (!conf || Object.keys(conf).length === 0) {
        return returnError(resources_1.default.errors.registry.CONFIGURATION_EMPTY);
    }
    const prefix = conf.prefix;
    if (prefix) {
        if (prefix.substr(0, 1) !== '/') {
            return returnError(resources_1.default.errors.registry.CONFIGURATION_PREFIX_DOES_NOT_START_WITH_SLASH);
        }
        if (prefix.substr(prefix.length - 1) !== '/') {
            return returnError(resources_1.default.errors.registry.CONFIGURATION_PREFIX_DOES_NOT_END_WITH_SLASH);
        }
    }
    const publishAuth = conf.publishAuth;
    if (publishAuth) {
        const res = auth.validate(publishAuth);
        if (!res.isValid) {
            return returnError(res.message);
        }
    }
    const dependencies = conf.dependencies;
    if (!!dependencies && !Array.isArray(dependencies)) {
        return returnError(resources_1.default.errors.registry.CONFIGURATION_DEPENDENCIES_MUST_BE_ARRAY);
    }
    const routes = conf.routes;
    if (!!routes && !Array.isArray(routes)) {
        return returnError(resources_1.default.errors.registry.CONFIGURATION_ROUTES_MUST_BE_ARRAY);
    }
    else {
        for (const route of routes || []) {
            if (!route.route || !route.handler || !route.method) {
                return returnError(resources_1.default.errors.registry.CONFIGURATION_ROUTES_NOT_VALID);
            }
            if (typeof route.handler !== 'function') {
                return returnError(resources_1.default.errors.registry.CONFIGURATION_ROUTES_HANDLER_MUST_BE_FUNCTION);
            }
            if (route.route.indexOf(prefix || '') === 0) {
                return returnError(resources_1.default.errors.registry.CONFIGURATION_ROUTES_ROUTE_CONTAINS_PREFIX(prefix || ''));
            }
        }
    }
    if (!conf.local && !conf.storage) {
        // S3 settings should either specify both key/secret or
        // skip both when leveraging IAM Role based S3 access from EC2
        if (!conf.s3 ||
            !conf.s3.bucket ||
            !conf.s3.region ||
            (conf.s3.key && !conf.s3.secret) ||
            (!conf.s3.key && conf.s3.secret)) {
            return returnError(resources_1.default.errors.registry.CONFIGURATION_STORAGE_NOT_VALID('S3'));
        }
    }
    if (!conf.local && conf.storage) {
        if (!conf.storage.adapter) {
            //required since this is done before the options-sanitiser
            conf.storage.adapter = require('oc-s3-storage-adapter');
        }
        const cdn = conf.storage.adapter(conf.storage.options);
        if (cdn.adapterType === 's3') {
            if (!conf.storage.options['bucket'] ||
                !conf.storage.options['region'] ||
                (conf.storage.options['key'] && !conf.storage.options['secret']) ||
                (!conf.storage.options['key'] && conf.storage.options['secret'])) {
                return returnError(resources_1.default.errors.registry.CONFIGURATION_STORAGE_NOT_VALID(cdn.adapterType.toUpperCase()));
            }
        }
    }
    if (conf.customHeadersToSkipOnWeakVersion) {
        if (!Array.isArray(conf.customHeadersToSkipOnWeakVersion)) {
            return returnError(resources_1.default.errors.registry
                .CONFIGURATION_HEADERS_TO_SKIP_MUST_BE_STRING_ARRAY);
        }
        const hasNonStringElements = conf.customHeadersToSkipOnWeakVersion.find(element => typeof element !== 'string');
        if (hasNonStringElements) {
            return returnError(resources_1.default.errors.registry
                .CONFIGURATION_HEADERS_TO_SKIP_MUST_BE_STRING_ARRAY);
        }
    }
    return { isValid: true };
}
exports.default = registryConfiguration;
