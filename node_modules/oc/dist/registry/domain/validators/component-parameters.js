"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const resources_1 = __importDefault(require("../../../resources"));
const validateParameter = function (parameter, expectedType) {
    const expected = expectedType.toLowerCase();
    if (expected === 'boolean') {
        return typeof parameter === 'boolean';
    }
    else if (expected === 'number') {
        return typeof parameter === 'number';
    }
    else if (expected === 'string') {
        return typeof parameter === 'string';
    }
    return false;
};
function componentParameters(requestParameters, expectedParameters = {}) {
    const result = { isValid: true, errors: {} };
    const mandatoryParameters = [];
    for (const [expectedParameterName, expectedParameter] of Object.entries(expectedParameters)) {
        if (expectedParameter.mandatory) {
            mandatoryParameters.push(expectedParameterName);
        }
    }
    for (const mandatoryParameterName of mandatoryParameters) {
        if (typeof requestParameters === 'object' &&
            // eslint-disable-next-line no-prototype-builtins
            !requestParameters.hasOwnProperty(mandatoryParameterName)) {
            if (!result.errors.mandatory) {
                result.errors.mandatory = {};
                result.isValid = false;
            }
            result.errors.mandatory[mandatoryParameterName] =
                resources_1.default.errors.registry.MANDATORY_PARAMETER_MISSING_CODE;
        }
    }
    for (const [requestParameterName, requestParameter] of Object.entries(requestParameters)) {
        if (typeof expectedParameters === 'object' &&
            // eslint-disable-next-line no-prototype-builtins
            expectedParameters.hasOwnProperty(requestParameterName)) {
            const expectedType = expectedParameters[requestParameterName].type;
            if (!validateParameter(requestParameter, expectedType)) {
                if (!result.errors.types) {
                    result.errors.types = {};
                    result.isValid = false;
                }
                result.errors.types[requestParameterName] =
                    resources_1.default.errors.registry.PARAMETER_WRONG_FORMAT_CODE;
            }
        }
    }
    result.errors.message = (function () {
        let errorString = '';
        if (Object.keys(result.errors.mandatory || {}).length > 0) {
            const missingParams = Object.keys(result.errors.mandatory || {})
                .map(mandatoryParameterName => mandatoryParameterName + ', ')
                .join('')
                .slice(0, -2);
            errorString +=
                resources_1.default.errors.registry.MANDATORY_PARAMETER_MISSING(missingParams);
        }
        if (Object.keys(result.errors.types || {}).length > 0) {
            if (errorString.length > 0) {
                errorString += '; ';
            }
            const badParams = Object.keys(result.errors.types || {})
                .map(parameterName => parameterName + ', ')
                .join('')
                .slice(0, -2);
            errorString += resources_1.default.errors.registry.PARAMETER_WRONG_FORMAT(badParams);
        }
        return errorString;
    })();
    return result;
}
exports.default = componentParameters;
