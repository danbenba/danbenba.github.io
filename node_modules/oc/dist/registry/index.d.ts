/// <reference types="node" />
import express from 'express';
import http from 'http';
import { Config, Plugin } from '../types';
interface Input extends Partial<Omit<Config, 'beforePublish'>> {
    baseUrl: string;
}
export default function registry(inputOptions: Input): {
    close: (callback: (err?: Error | undefined | string) => void) => void | http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
    on: <T extends keyof {
        error: {
            code: string;
            message: string;
        };
        start: unknown;
        'cache-poll': number;
        request: import("./domain/events-handler").RequestData;
        'component-retrieved': {
            headers: http.IncomingHttpHeaders;
            name: string;
            parameters: http.IncomingHttpHeaders;
            requestVersion: string;
            duration: number;
        };
        'data-provider-error': {
            name: string;
            version: string;
            parameters: Record<string, string | number | boolean>;
            requestVersion: string;
            status: number;
            error: Error;
        };
    }>(eventName: T, listener: (data: {
        error: {
            code: string;
            message: string;
        };
        start: unknown;
        'cache-poll': number;
        request: import("./domain/events-handler").RequestData;
        'component-retrieved': {
            headers: http.IncomingHttpHeaders;
            name: string;
            parameters: http.IncomingHttpHeaders;
            requestVersion: string;
            duration: number;
        };
        'data-provider-error': {
            name: string;
            version: string;
            parameters: Record<string, string | number | boolean>;
            requestVersion: string;
            status: number;
            error: Error;
        };
    }[T]) => void) => void;
    register: (plugin: Omit<Plugin, 'callback'>, callback?: ((...args: any[]) => void) | undefined) => void;
    start: (callback: (err: unknown, data?: {
        app: express.Express;
        server: http.Server;
    } | undefined) => void) => Promise<void>;
    app: express.Express;
};
export {};
