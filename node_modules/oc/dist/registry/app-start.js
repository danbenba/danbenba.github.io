"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const safe_1 = __importDefault(require("colors/safe"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const packageInfo = fs_extra_1.default.readJsonSync(path_1.default.join(__dirname, '..', 'components', 'oc-client', '_package', 'package.json'));
async function appStart(repository, options) {
    if (options.local) {
        return;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    const logger = options.verbosity ? console : { log: () => { } };
    logger.log(safe_1.default.yellow(`Connecting to library: ${options.storage.options['bucket']}/${options.storage.options.componentsDir}`));
    try {
        const componentInfo = await repository.getComponentVersions('oc-client');
        logger.log(safe_1.default.yellow(`Ensuring oc-client@${packageInfo.version} is available on library...`));
        if (!componentInfo.includes(packageInfo.version)) {
            logger.log(safe_1.default.yellow('Component not found. Publishing it...'));
            const pkgInfo = {
                outputFolder: path_1.default.resolve(__dirname, '../components/oc-client/_package'),
                packageJson: packageInfo
            };
            try {
                await repository.publishComponent(pkgInfo, 'oc-client', packageInfo.version);
                logger.log(safe_1.default.green('Component published.'));
            }
            catch (err) {
                logger.log(safe_1.default.red(`Component not published: ${err.message}`));
                throw err;
            }
        }
        else {
            logger.log(safe_1.default.green('Component is available on library.'));
        }
    }
    catch (err) {
        logger.log(safe_1.default.red(String(err)));
        throw err;
    }
}
exports.default = appStart;
