"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const safe_1 = __importDefault(require("colors/safe"));
const express_1 = __importDefault(require("express"));
const http_1 = __importDefault(require("http"));
const lodash_1 = __importDefault(require("lodash"));
const app_start_1 = __importDefault(require("./app-start"));
const events_handler_1 = __importDefault(require("./domain/events-handler"));
const middleware = __importStar(require("./middleware"));
const pluginsInitialiser = __importStar(require("./domain/plugins-initialiser"));
const repository_1 = __importDefault(require("./domain/repository"));
const router_1 = require("./router");
const options_sanitiser_1 = __importDefault(require("./domain/options-sanitiser"));
const validator = __importStar(require("./domain/validators"));
function registry(inputOptions) {
    const validationResult = validator.validateRegistryConfiguration(inputOptions);
    if (!validationResult.isValid) {
        throw validationResult.message;
    }
    const options = (0, options_sanitiser_1.default)(inputOptions);
    const plugins = [];
    const app = middleware.bind((0, express_1.default)(), options);
    let server;
    const repository = (0, repository_1.default)(options);
    const close = (callback) => {
        if (server && server.listening) {
            return server.close(callback);
        }
        return callback('not opened');
    };
    const register = (plugin, callback) => {
        plugins.push(Object.assign(plugin, { callback }));
    };
    const start = async (callback) => {
        // eslint-disable-next-line no-console
        const ok = (msg) => console.log(safe_1.default.green(msg));
        (0, router_1.create)(app, options, repository);
        try {
            options.plugins = await pluginsInitialiser.init(plugins);
            const componentsInfo = await repository.init();
            await (0, app_start_1.default)(repository, options);
            server = http_1.default.createServer(app);
            server.timeout = options.timeout;
            if (options.keepAliveTimeout) {
                server.keepAliveTimeout = options.keepAliveTimeout;
            }
            // @ts-ignore Type not taking error on callback (this can error, though)
            server.listen(options.port, (err) => {
                if (err) {
                    return callback(err);
                }
                events_handler_1.default.fire('start', {});
                if (options.verbosity) {
                    ok(`Registry started at port http://localhost:${app.get('port')}`);
                    if (lodash_1.default.isObject(componentsInfo)) {
                        const componentsNumber = Object.keys(componentsInfo.components).length;
                        const componentsReleases = Object.values(componentsInfo.components).reduce((acc, component) => acc + Object.keys(component).length, 0);
                        ok(`Registry serving ${componentsNumber} components for a total of ${componentsReleases} releases.`);
                    }
                }
                callback(null, { app, server });
            });
            server.on('error', error => {
                events_handler_1.default.fire('error', {
                    code: 'EXPRESS_ERROR',
                    message: error?.message ?? String(error)
                });
                callback(error);
            });
        }
        catch (err) {
            callback(err?.msg || err);
        }
    };
    return {
        close,
        on: events_handler_1.default.on,
        register,
        start,
        app
    };
}
exports.default = registry;
