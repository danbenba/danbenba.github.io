"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bind = void 0;
const express_1 = __importDefault(require("express"));
const errorhandler_1 = __importDefault(require("errorhandler"));
const morgan_1 = __importDefault(require("morgan"));
const base_url_handler_1 = __importDefault(require("./base-url-handler"));
const cors_1 = __importDefault(require("./cors"));
const discovery_handler_1 = __importDefault(require("./discovery-handler"));
const file_uploads_1 = __importDefault(require("./file-uploads"));
const request_handler_1 = __importDefault(require("./request-handler"));
const bodyParserJsonArgument = {
    inflate: true
};
const bodyParserUrlEncodedArgument = {
    extended: true
};
const bind = (app, options) => {
    app.set('port', options.port);
    app.set('json spaces', 0);
    app.set('etag', 'strong');
    app.use((_req, res, next) => {
        res.conf = options;
        next();
    });
    app.use((0, request_handler_1.default)());
    if (options.postRequestPayloadSize) {
        bodyParserJsonArgument.limit = options.postRequestPayloadSize;
        bodyParserUrlEncodedArgument.limit = options.postRequestPayloadSize;
    }
    app.use(express_1.default.json(bodyParserJsonArgument));
    app.use(express_1.default.urlencoded(bodyParserUrlEncodedArgument));
    app.use(cors_1.default);
    app.use(file_uploads_1.default);
    app.use(base_url_handler_1.default);
    app.use(discovery_handler_1.default);
    if (options.verbosity) {
        app.use((0, morgan_1.default)('dev'));
    }
    if (options.local) {
        app.use((0, errorhandler_1.default)());
    }
    return app;
};
exports.bind = bind;
