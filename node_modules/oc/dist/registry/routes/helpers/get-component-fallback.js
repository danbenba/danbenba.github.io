"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentInfo = exports.getComponentPreview = exports.getComponent = void 0;
const minimal_request_1 = __importDefault(require("minimal-request"));
const url_1 = __importDefault(require("url"));
const urlBuilder = __importStar(require("../../domain/url-builder"));
function getComponentFallbackForViewType(buildUrl, conf, req, res, registryError, callback) {
    const path = buildUrl({
        name: req.params['componentName'],
        version: req.params['componentVersion']
    }, conf.fallbackRegistryUrl);
    return (0, minimal_request_1.default)({
        method: 'get',
        url: path,
        headers: {
            ...req.headers,
            host: url_1.default.parse(conf.fallbackRegistryUrl).host,
            accept: 'application/json'
        }
    }, (fallbackErr, fallbackResponse) => {
        if (fallbackErr === 304) {
            return res.status(304).send('');
        }
        if (fallbackErr) {
            return callback({
                registryError: registryError,
                fallbackError: fallbackErr
            }, undefined);
        }
        try {
            return callback(null, JSON.parse(fallbackResponse));
        }
        catch (parseError) {
            return callback({
                registryError: registryError,
                fallbackError: `Could not parse fallback response: ${fallbackResponse}`
            }, undefined);
        }
    });
}
function getComponent(fallbackRegistryUrl, headers, component, callback) {
    return (0, minimal_request_1.default)({
        method: 'post',
        url: fallbackRegistryUrl,
        headers: { ...headers, host: url_1.default.parse(fallbackRegistryUrl).host },
        json: true,
        body: { components: [component] }
    }, (err, res) => {
        if (err || !res || res.length === 0) {
            return callback({
                status: 404,
                response: {
                    code: 'NOT_FOUND',
                    error: err
                }
            });
        }
        return callback(res[0]);
    });
}
exports.getComponent = getComponent;
function getComponentPreview(conf, req, res, registryError, callback) {
    getComponentFallbackForViewType(urlBuilder.componentPreview, conf, req, res, registryError, callback);
}
exports.getComponentPreview = getComponentPreview;
function getComponentInfo(conf, req, res, registryError, callback) {
    getComponentFallbackForViewType(urlBuilder.componentInfo, conf, req, res, registryError, callback);
}
exports.getComponentInfo = getComponentInfo;
