"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const parse_author_1 = __importDefault(require("parse-author"));
const universalify_1 = require("universalify");
const getComponentFallback = __importStar(require("./helpers/get-component-fallback"));
const info_1 = __importDefault(require("../views/info"));
const is_url_discoverable_1 = __importDefault(require("./helpers/is-url-discoverable"));
const urlBuilder = __importStar(require("../domain/url-builder"));
function getParams(component) {
    let params = {};
    if (component.oc.parameters) {
        params = Object.fromEntries(Object.entries(component.oc.parameters || {})
            .filter(([, param]) => {
            return !!param.mandatory && 'example' in param;
        })
            .map(([paramName, param]) => [paramName, param.example]));
    }
    return params;
}
function getParsedAuthor(component) {
    const author = component.author || {};
    return typeof author === 'string' ? (0, parse_author_1.default)(author) : author;
}
function componentInfo(err, req, res, component) {
    if (err) {
        res.errorDetails = err.registryError || err;
        res.status(404).json(err);
        return;
    }
    const isHtmlRequest = !!req.headers.accept && req.headers.accept.indexOf('text/html') >= 0;
    if (isHtmlRequest && !!res.conf.discovery) {
        const params = getParams(component);
        const parsedAuthor = getParsedAuthor(component);
        let href = res.conf.baseUrl;
        const repositoryUrl = typeof component.repository === 'string'
            ? component.repository
            : component.repository?.url ?? null;
        (0, universalify_1.fromPromise)(is_url_discoverable_1.default)(href, (_err, result) => {
            if (!result.isDiscoverable) {
                href = `//${req.headers.host}${res.conf.prefix}`;
            }
            res.send((0, info_1.default)({
                component,
                dependencies: Object.keys(component.dependencies || {}),
                href,
                parsedAuthor,
                repositoryUrl,
                sandBoxDefaultQs: urlBuilder.queryString(params),
                title: 'Component Info'
            }));
        });
    }
    else {
        res.status(200).json(Object.assign(component, {
            requestVersion: req.params['componentVersion'] || ''
        }));
    }
}
function componentInfoRoute(conf, repository) {
    return function (req, res) {
        (0, universalify_1.fromPromise)(repository.getComponent)(req.params['componentName'], req.params['componentVersion'], (registryError, component) => {
            if (registryError && conf.fallbackRegistryUrl) {
                return getComponentFallback.getComponentInfo(conf, req, res, registryError, (fallbackError, fallbackComponent) => componentInfo(fallbackError, req, res, fallbackComponent));
            }
            componentInfo(registryError, req, res, component);
        });
    };
}
exports.default = componentInfoRoute;
