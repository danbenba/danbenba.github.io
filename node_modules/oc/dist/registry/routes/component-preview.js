"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const getComponentFallback = __importStar(require("./helpers/get-component-fallback"));
const preview_1 = __importDefault(require("../views/preview"));
const urlBuilder = __importStar(require("../domain/url-builder"));
const universalify_1 = require("universalify");
function componentPreview(err, req, res, component, templates) {
    if (err) {
        res.errorDetails = err.registryError || err;
        res.errorCode = 'NOT_FOUND';
        res.status(404).json(err);
        return;
    }
    let liveReload = '';
    if (res.conf.liveReloadPort) {
        liveReload = `<script src="http://localhost:${res.conf.liveReloadPort}/livereload.js?snipver=1"></script>`;
    }
    const isHtmlRequest = !!req.headers.accept && req.headers.accept.indexOf('text/html') >= 0;
    if (isHtmlRequest && !!res.conf.discovery) {
        res.send((0, preview_1.default)({
            component,
            href: res.conf.baseUrl,
            liveReload,
            qs: urlBuilder.queryString(req.query),
            templates
        }));
    }
    else {
        res.status(200).json(Object.assign(component, {
            requestVersion: req.params['componentVersion'] || ''
        }));
    }
}
function componentPreviewRoute(conf, repository) {
    return (req, res) => {
        (0, universalify_1.fromPromise)(repository.getComponent)(req.params['componentName'], req.params['componentVersion'], (registryError, component) => {
            if (registryError && conf.fallbackRegistryUrl) {
                return getComponentFallback.getComponentPreview(conf, req, res, registryError, (fallbackError, fallbackComponent) => {
                    componentPreview(fallbackError, req, res, fallbackComponent, repository.getTemplatesInfo());
                });
            }
            componentPreview(registryError, req, res, component, repository.getTemplatesInfo());
        });
    };
}
exports.default = componentPreviewRoute;
