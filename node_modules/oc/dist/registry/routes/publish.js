"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extract_package_1 = __importDefault(require("../domain/extract-package"));
const index_1 = __importDefault(require("../../resources/index"));
const validator = __importStar(require("../domain/validators"));
function publish(repository) {
    return async function (req, res) {
        if (!req.params['componentName'] || !req.params['componentVersion']) {
            res.errorDetails = 'malformed request';
            res.status(409).json({ error: res.errorDetails });
            return;
        }
        const packageValidation = validator.validatePackage(req.files);
        if (!packageValidation.isValid) {
            res.errorDetails = 'package is not valid';
            res.status(409).json({ error: res.errorDetails });
            return;
        }
        const files = packageValidation.files;
        const ocCliValidationResult = validator.validateOcCliVersion(req.headers['user-agent']);
        if (!ocCliValidationResult.isValid) {
            res.errorDetails = index_1.default.errors.registry.OC_CLI_VERSION_IS_NOT_VALID(ocCliValidationResult.error.registryVersion, ocCliValidationResult.error.cliVersion);
            res.status(409).json({
                code: 'cli_version_not_valid',
                error: res.errorDetails,
                details: ocCliValidationResult.error
            });
            return;
        }
        const nodeValidationResult = validator.validateNodeVersion(req.headers['user-agent'], process.version);
        if (!nodeValidationResult.isValid) {
            res.errorDetails = index_1.default.errors.registry.NODE_CLI_VERSION_IS_NOT_VALID(nodeValidationResult.error.registryNodeVersion, nodeValidationResult.error.cliNodeVersion);
            res.status(409).json({
                code: 'node_version_not_valid',
                error: res.errorDetails,
                details: nodeValidationResult.error
            });
            return;
        }
        try {
            const pkgDetails = await (0, extract_package_1.default)(files, res.conf.tarExtractMode);
            try {
                await repository.publishComponent(pkgDetails, req.params['componentName'], req.params['componentVersion']);
                res.status(200).json({ ok: true });
            }
            catch (err) {
                let errorMessage = err.msg || err.message;
                if (res.conf.local) {
                    errorMessage = JSON.stringify(err);
                }
                if (err.code === 'not_allowed') {
                    res.errorDetails = `Publish not allowed: ${errorMessage}`;
                    res.status(403).json({ error: err });
                }
                else if (err.code === 'already_exists') {
                    res.errorDetails = `Component already exists: ${errorMessage}`;
                    res.status(403).json({ error: err });
                }
                else if (err.code === 'name_not_valid') {
                    res.errorDetails = `Component name not valid: ${errorMessage}`;
                    res.status(409).json({ error: err });
                }
                else if (err.code === 'version_not_valid') {
                    res.errorDetails = `Component version not valid: ${errorMessage}`;
                    res.status(409).json({ error: err });
                }
                else {
                    res.errorDetails = `Publish failed: ${errorMessage}`;
                    res.status(500).json({ error: err });
                }
            }
        }
        catch (err) {
            res.errorDetails = `Package is not valid: ${err}`;
            res.status(500).json({ error: 'package is not valid', details: err });
        }
    };
}
exports.default = publish;
