"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const component_author_1 = __importDefault(require("./partials/component-author"));
const component_parameters_1 = __importDefault(require("./partials/component-parameters"));
const component_state_1 = __importDefault(require("./partials/component-state"));
const component_versions_1 = __importDefault(require("./partials/component-versions"));
const info_1 = __importDefault(require("./static/info"));
const layout_1 = __importDefault(require("./partials/layout"));
const property_1 = __importDefault(require("./partials/property"));
const is_template_legacy_1 = __importDefault(require("../../utils/is-template-legacy"));
function info(vm) {
    const componentAuthor = (0, component_author_1.default)(vm);
    const componentParameters = (0, component_parameters_1.default)(vm);
    const componentState = (0, component_state_1.default)(vm);
    const componentVersions = (0, component_versions_1.default)(vm);
    const layout = (0, layout_1.default)(vm);
    const property = (0, property_1.default)();
    const showArray = (title, arr) => property(title, !!arr && arr.length > 0 ? arr.join(', ') : 'none');
    const { component, dependencies, href, repositoryUrl, sandBoxDefaultQs } = vm;
    const componentHref = `${href}${component.name}/${component.version}/${sandBoxDefaultQs}`;
    const publishDate = component.oc.date
        ? new Date(component.oc.date)
        : 'not available';
    const publishAgent = component.oc.version
        ? `OC CLI ${component.oc.version}`
        : 'not available';
    const templateType = component.oc.files.template.type;
    const compiler = `${templateType}-compiler`;
    const template = `${templateType} (${(0, is_template_legacy_1.default)(templateType)
        ? 'legacy'
        : compiler + '@' + component.oc.files.template.version})`;
    const content = `<a class="back" href="${href}">&lt;&lt; All components</a>
    <h2>${component.name} &nbsp;${componentVersions()}</h2>
    <p class="w-100">${component.description} ${componentState()}</p>
    <h3>Component Info</h3>
    ${property('Repository', repositoryUrl || 'not available', !!repositoryUrl)}
    ${componentAuthor()}
    ${property('Publish date', publishDate)}
    ${property('Publish agent', publishAgent)}
    ${property('Template', template)}
    ${showArray('Node.js dependencies', dependencies)}
    ${showArray('Plugin dependencies', component.oc.plugins)}
    ${componentParameters()}
    <h3>Code</h3>
    <p>
      You can edit the following area and then
      <a href="#refresh" class="refresh-preview">refresh</a>
      to apply the change into the preview window.
    </p>
    <div class="field"><p>Component's href:</p></div>
    <textarea class="w-100" id="href" placeholder="Insert component href here">${componentHref}</textarea>
    <div class="field"><p>Accept-Language header:</p></div>
    <input class="w-100" id="lang" type="text" value="*" />
    <h3>
      Preview (
      <a class="refresh-preview" href="#refresh">Refresh</a>
      |
      <a class="open-preview" href="#open">Open</a>
      )
    </h3>
    <iframe class="preview" src="~preview/${sandBoxDefaultQs}"></iframe>`;
    const scripts = `<script>var thisComponentHref="${href}${component.name}/";
    ${info_1.default}
  </script>`;
    return layout({ content, scripts });
}
exports.default = info;
